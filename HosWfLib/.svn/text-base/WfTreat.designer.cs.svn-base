using System;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Collections;
using System.Drawing;
using System.Reflection;
using System.Workflow.ComponentModel;
using System.Workflow.ComponentModel.Design;
using System.Workflow.Runtime;
using System.Workflow.Activities;
using System.Workflow.Activities.Rules;

namespace Hos.WorkFlow
{
    partial class WfTreat
    {
        #region Designer generated code

        /// <summary> 
        /// 设计器支持所需的方法 - 不要
        /// 使用代码编辑器修改此方法的内容。
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        private void InitializeComponent()
        {
            this.CanModifyActivities = true;
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference1 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference2 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference3 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference4 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference5 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference6 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind1 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.WorkflowParameterBinding workflowparameterbinding1 = new System.Workflow.ComponentModel.WorkflowParameterBinding();
            System.Workflow.ComponentModel.WorkflowParameterBinding workflowparameterbinding2 = new System.Workflow.ComponentModel.WorkflowParameterBinding();
            System.Workflow.ComponentModel.ActivityBind activitybind3 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind2 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.WorkflowParameterBinding workflowparameterbinding3 = new System.Workflow.ComponentModel.WorkflowParameterBinding();
            System.Workflow.ComponentModel.ActivityBind activitybind4 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.WorkflowParameterBinding workflowparameterbinding4 = new System.Workflow.ComponentModel.WorkflowParameterBinding();
            this.不需要住院 = new System.Workflow.Activities.IfElseBranchActivity();
            this.需要住院 = new System.Workflow.Activities.IfElseBranchActivity();
            this.是否需要住院 = new System.Workflow.Activities.IfElseActivity();
            this.等待体检工作流结束 = new System.Workflow.Activities.HandleExternalEventActivity();
            this.开启体检工作流 = new System.Workflow.Activities.CodeActivity();
            this.不需要检查 = new System.Workflow.Activities.IfElseBranchActivity();
            this.需要检查 = new System.Workflow.Activities.IfElseBranchActivity();
            this.分诊至其他 = new System.Workflow.Activities.IfElseBranchActivity();
            this.分诊至肠胃科 = new System.Workflow.Activities.IfElseBranchActivity();
            this.让主工作流跳转 = new System.Workflow.Activities.InvokeWebServiceActivity();
            this.是否需要检查 = new System.Workflow.Activities.IfElseActivity();
            this.接收就诊结果 = new System.Workflow.Activities.HandleExternalEventActivity();
            this.setStateActivity2 = new System.Workflow.Activities.SetStateActivity();
            this.分诊分支 = new System.Workflow.Activities.IfElseActivity();
            this.接收分诊结果 = new System.Workflow.Activities.HandleExternalEventActivity();
            this.setStateActivity1 = new System.Workflow.Activities.SetStateActivity();
            this.等待就诊完成 = new System.Workflow.Activities.EventDrivenActivity();
            this.等待分诊结果 = new System.Workflow.Activities.EventDrivenActivity();
            this.stateInitializationActivity1 = new System.Workflow.Activities.StateInitializationActivity();
            this.就诊 = new System.Workflow.Activities.StateActivity();
            this.分诊 = new System.Workflow.Activities.StateActivity();
            this.初始状态 = new System.Workflow.Activities.StateActivity();
            // 
            // 不需要住院
            // 
            ruleconditionreference1.ConditionName = "条件6";
            this.不需要住院.Condition = ruleconditionreference1;
            this.不需要住院.Name = "不需要住院";
            // 
            // 需要住院
            // 
            ruleconditionreference2.ConditionName = "条件5";
            this.需要住院.Condition = ruleconditionreference2;
            this.需要住院.Name = "需要住院";
            // 
            // 是否需要住院
            // 
            this.是否需要住院.Activities.Add(this.需要住院);
            this.是否需要住院.Activities.Add(this.不需要住院);
            this.是否需要住院.Name = "是否需要住院";
            // 
            // 等待体检工作流结束
            // 
            this.等待体检工作流结束.Enabled = false;
            this.等待体检工作流结束.Name = "等待体检工作流结束";
            // 
            // 开启体检工作流
            // 
            this.开启体检工作流.Name = "开启体检工作流";
            this.开启体检工作流.ExecuteCode += new System.EventHandler(this.通知转到检查状态_ExecuteCode);
            // 
            // 不需要检查
            // 
            this.不需要检查.Activities.Add(this.是否需要住院);
            ruleconditionreference3.ConditionName = "条件4";
            this.不需要检查.Condition = ruleconditionreference3;
            this.不需要检查.Name = "不需要检查";
            // 
            // 需要检查
            // 
            this.需要检查.Activities.Add(this.开启体检工作流);
            this.需要检查.Activities.Add(this.等待体检工作流结束);
            ruleconditionreference4.ConditionName = "条件3";
            this.需要检查.Condition = ruleconditionreference4;
            this.需要检查.Name = "需要检查";
            // 
            // 分诊至其他
            // 
            ruleconditionreference5.ConditionName = "条件2";
            this.分诊至其他.Condition = ruleconditionreference5;
            this.分诊至其他.Name = "分诊至其他";
            // 
            // 分诊至肠胃科
            // 
            ruleconditionreference6.ConditionName = "条件1";
            this.分诊至肠胃科.Condition = ruleconditionreference6;
            this.分诊至肠胃科.Name = "分诊至肠胃科";
            // 
            // 让主工作流跳转
            // 
            this.让主工作流跳转.MethodName = "OnTreatCompleted";
            this.让主工作流跳转.Name = "让主工作流跳转";
            activitybind1.Name = "WfTreat";
            activitybind1.Path = "patientStrID";
            workflowparameterbinding1.ParameterName = "patientStrID";
            workflowparameterbinding1.SetBinding(System.Workflow.ComponentModel.WorkflowParameterBinding.ValueProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind1)));
            workflowparameterbinding2.ParameterName = "(ReturnValue)";
            workflowparameterbinding2.Value = "\"成功么\"";
            this.让主工作流跳转.ParameterBindings.Add(workflowparameterbinding1);
            this.让主工作流跳转.ParameterBindings.Add(workflowparameterbinding2);
            this.让主工作流跳转.ProxyClass = typeof(Hos.WorkFlow.ParentServices.Service1);
            // 
            // 是否需要检查
            // 
            this.是否需要检查.Activities.Add(this.需要检查);
            this.是否需要检查.Activities.Add(this.不需要检查);
            this.是否需要检查.Name = "是否需要检查";
            activitybind3.Name = "WfTreat";
            activitybind3.Path = "接收就诊结果_Invoked1";
            // 
            // 接收就诊结果
            // 
            this.接收就诊结果.EventName = "DiagnoseCompleted";
            this.接收就诊结果.InterfaceType = typeof(Hos.WorkFlow.LocalServices.IWfLocalServices);
            this.接收就诊结果.Name = "接收就诊结果";
            activitybind2.Name = "WfTreat";
            activitybind2.Path = "diagnoseCompletedEventArgs";
            workflowparameterbinding3.ParameterName = "e";
            workflowparameterbinding3.SetBinding(System.Workflow.ComponentModel.WorkflowParameterBinding.ValueProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind2)));
            this.接收就诊结果.ParameterBindings.Add(workflowparameterbinding3);
            this.接收就诊结果.SetBinding(System.Workflow.Activities.HandleExternalEventActivity.InvokedEvent, ((System.Workflow.ComponentModel.ActivityBind)(activitybind3)));
            // 
            // setStateActivity2
            // 
            this.setStateActivity2.Name = "setStateActivity2";
            this.setStateActivity2.TargetStateName = "就诊";
            // 
            // 分诊分支
            // 
            this.分诊分支.Activities.Add(this.分诊至肠胃科);
            this.分诊分支.Activities.Add(this.分诊至其他);
            this.分诊分支.Name = "分诊分支";
            // 
            // 接收分诊结果
            // 
            this.接收分诊结果.EventName = "TriageCompleted";
            this.接收分诊结果.InterfaceType = typeof(Hos.WorkFlow.LocalServices.IWfLocalServices);
            this.接收分诊结果.Name = "接收分诊结果";
            activitybind4.Name = "WfTreat";
            activitybind4.Path = "triageCompletedEventArgs";
            workflowparameterbinding4.ParameterName = "e";
            workflowparameterbinding4.SetBinding(System.Workflow.ComponentModel.WorkflowParameterBinding.ValueProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind4)));
            this.接收分诊结果.ParameterBindings.Add(workflowparameterbinding4);
            // 
            // setStateActivity1
            // 
            this.setStateActivity1.Name = "setStateActivity1";
            this.setStateActivity1.TargetStateName = "分诊";
            // 
            // 等待就诊完成
            // 
            this.等待就诊完成.Activities.Add(this.接收就诊结果);
            this.等待就诊完成.Activities.Add(this.是否需要检查);
            this.等待就诊完成.Activities.Add(this.让主工作流跳转);
            this.等待就诊完成.Name = "等待就诊完成";
            // 
            // 等待分诊结果
            // 
            this.等待分诊结果.Activities.Add(this.接收分诊结果);
            this.等待分诊结果.Activities.Add(this.分诊分支);
            this.等待分诊结果.Activities.Add(this.setStateActivity2);
            this.等待分诊结果.Name = "等待分诊结果";
            // 
            // stateInitializationActivity1
            // 
            this.stateInitializationActivity1.Activities.Add(this.setStateActivity1);
            this.stateInitializationActivity1.Name = "stateInitializationActivity1";
            // 
            // 就诊
            // 
            this.就诊.Activities.Add(this.等待就诊完成);
            this.就诊.Name = "就诊";
            // 
            // 分诊
            // 
            this.分诊.Activities.Add(this.等待分诊结果);
            this.分诊.Name = "分诊";
            // 
            // 初始状态
            // 
            this.初始状态.Activities.Add(this.stateInitializationActivity1);
            this.初始状态.Name = "初始状态";
            // 
            // WfTreat
            // 
            this.Activities.Add(this.初始状态);
            this.Activities.Add(this.分诊);
            this.Activities.Add(this.就诊);
            this.CompletedStateName = null;
            this.DynamicUpdateCondition = null;
            this.InitialStateName = "初始状态";
            this.Name = "WfTreat";
            this.CanModifyActivities = false;

        }

        #endregion

        private InvokeWebServiceActivity 让主工作流跳转;
        private HandleExternalEventActivity 等待体检工作流结束;
        private SetStateActivity setStateActivity1;
        private StateInitializationActivity stateInitializationActivity1;
        private IfElseBranchActivity 不需要住院;
        private IfElseBranchActivity 需要住院;
        private IfElseActivity 是否需要住院;
        private CodeActivity 开启体检工作流;
        private IfElseBranchActivity 不需要检查;
        private IfElseBranchActivity 需要检查;
        private IfElseActivity 是否需要检查;
        private HandleExternalEventActivity 接收分诊结果;
        private EventDrivenActivity 等待分诊结果;
        private StateActivity 分诊;
        private IfElseBranchActivity 分诊至其他;
        private IfElseBranchActivity 分诊至肠胃科;
        private IfElseActivity 分诊分支;
        private EventDrivenActivity 等待就诊完成;
        private StateActivity 就诊;
        private SetStateActivity setStateActivity2;
        private HandleExternalEventActivity 接收就诊结果;
        private StateActivity 初始状态;








































































































































































    }
}
